#+TITLE: Emacs Configuration
#+AUTHOR: Min Han
#+EMAIL: glide1@gmail.com
#+DATE: 2014-08-07
#+DESCRIPTION: Emacs configuration in a self documenting way in org-mode
#+KEYWORDS: emacs org configure
#+LANGUAGE: EN

* Motivation

  It's difficult to keep up with emacs changes especially since I'm not
  modifying Emacs full time or something.
  
* Prerequisites
  
  Currently this has only been tested on OS X. 

* Basic initialization

  Certain things need to be setup before anything else.
  One of these things is the package manager

** Package Manager Setup

   Let's get melpa in here, and el-get.
   #+begin_src emacs-lisp
     (require 'package)
     
     (setq package-user-dir "~/.emacs.d/elpha/")
     (add-to-list 'package-archives
                  '("melpa" . "http://melpa.milkbox.net/packages/") t)
     (package-initialize)
     
     (add-to-list 'load-path "~/.emacs.d/el-get/el-get")
     
     (unless (require 'el-get nil 'noerror)
       (with-current-buffer
           (url-retrieve-synchronously
            "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
         (goto-char (point-max))
         (eval-print-last-sexp)))
     
     (add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
     (el-get 'sync)
   #+end_src
   
** List of Packages

   These are the packages that I want installed
   
   #+begin_src emacs-lisp
     (defun install-my-packages ()
       "Installs my packages."
         (mapc `(lambda (package)
                (unless (package-installed-p package)
                  (package-install package)))
             '(evil
               evil-leader
               evil-tabs
               elscreen
               magit
               paredit
               undo-tree
               flycheck
               ag
               auto-complete
               helm
               discover-my-major
               web-mode
               zenburn-theme)))
   #+end_src

   And a method to call it:
   #+begin_src emacs-lisp
     (condition-case nil 
         (install-my-packages)
       (error
        (package-refresh-contents)
        (install-my-packages)))
   #+end_src

   Here are some packages from el-get:

   #+begin_src emacs-lisp
     (el-get-install 'js3-mode)
     (el-get-install 'tern)
   #+end_src

** Post Package installation

   Be sure to go into the tern directory in .emacs.d/el-get/tern and run
   npm install to set it up properly. Emacs will call the tern in this
   directory and if it's not installed it will not run properly.
   
* Package Customization

  What's the fun if the packages aren't customized in some way?

** base emacs

   #+begin_src emacs-lisp
     (electric-indent-mode 1)
     
     (column-number-mode)
   #+end_src


** evil

   #+begin_src emacs-lisp
     (require 'evil)
     (evil-mode)
     
     ;;so we start up in the normal mode
     
     (setq evil-default-state 'normal)
     
     ;;; esc quits
     (define-key evil-normal-state-map [escape] 'keyboard-quit)
     (define-key evil-visual-state-map [escape] 'keyboard-quit)
     (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
     (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
     (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
     (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
     (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
     
     
     (define-key evil-normal-state-map "\C-y" 'yank)
     (define-key evil-insert-state-map "\C-y" 'yank)
     (define-key evil-visual-state-map "\C-y" 'yank)
     (define-key evil-insert-state-map "\C-e" 'end-of-line)
     (define-key evil-normal-state-map "\C-w" 'evil-delete)
     (define-key evil-insert-state-map "\C-w" 'evil-delete)
     (define-key evil-insert-state-map "\C-r" 'search-backward)
     (define-key evil-visual-state-map "\C-w" 'evil-delete)
     
     ;; ret and return so it works in term and X
     (evil-declare-key 'motion completion-list-mode-map (kbd "<return>") 'choose-completion)
     (evil-declare-key 'motion completion-list-mode-map (kbd "RET") 'choose-completion)
     (evil-declare-key 'motion browse-kill-ring-mode-map (kbd "<return>") 'browse-kill-ring-insert-and-quit)
     (evil-declare-key 'motion browse-kill-ring-mode-map (kbd "RET") 'browse-kill-ring-insert-and-quit)
     (evil-declare-key 'motion occur-mode-map (kbd "<return>") 'occur-mode-goto-occurrence)
     (evil-declare-key 'motion occur-mode-map (kbd "RET") 'occur-mode-goto-occurrence)
     
   #+end_src

   The last bit is for default states. Sometimes evil gets in the way of using of some of the tools so set
   the default state to emacs.


   #+begin_src emacs-lisp
     (loop for (mode . state) in '(
                                   (dired-mode . emacs)
                                   )
           do (evil-set-initial-state mode state))
   #+end_src

** evil-leader

   #+begin_src emacs-lisp
     (require 'evil-leader)
     
     (global-evil-leader-mode)
     (evil-leader/set-leader "\\")
   #+end_src
** evil-tabs

   Add some custom keys in evil to create and kill tabs

   #+begin_src emacs-lisp
     (require 'evil-tabs)
     (global-evil-tabs-mode t)
     
     (evil-define-key 'normal evil-tabs-mode-map
       "gc" 'elscreen-create
       "gk" 'elscreen-kill)
   #+end_src

** helm

   #+begin_src emacs-lisp
     (helm-mode)
   #+end_src

** auto-complete

   auto-complete has good defaults. I like having a key press to force
   it however.

   #+begin_src emacs-lisp
     (require 'auto-complete-config)
     (ac-config-default)

     (define-key ac-mode-map (kbd "M-SPC") 'auto-complete)
   #+end_src

** elscreen

   #+begin_src emacs-lisp
     (elscreen-set-prefix-key "\C-w")
     (elscreen-start)
   #+end_src

** discover-my-major

   Really a keybind just needs to be set for this.
   
   #+begin_src emacs-lisp
     
     (global-set-key (kbd "C-h C-m") 'discover-my-major)
     
   #+end_src

** web-mode

   Be sure to add tern to web-mode

   #+begin_src emacs-lisp
     (require 'web-mode)
     
     
   #+end_src
   
** Tern

   Make sure to tie in tern with js3-mode.
   Tie in tern and auto-complete.
   
   #+begin_src emacs-lisp
     
     (eval-after-load 'tern
       '(progn
          (require 'tern-auto-complete)
          (tern-ac-setup)))
     
     
   #+end_src
   

** js3-mode


   #+begin_src emacs-lisp
     (setq js3-mirror-mode t)
     
     (add-hook 'js3-mode-hook (lambda ()
                                (tern-mode t)
                                (when (require 'auto-complete nil t)
                                  (make-variable-buffer-local 'ac-sources)
                                  (add-to-list 'ac-sources 'ac-source-yasnippet)
                                  (auto-complete-mode t))))
     
   #+end_src
** other
   
   #+begin_src emacs-lisp
     (load-theme 'zenburn t)
   #+end_src
   
** path customization

   #+begin_src emacs-lisp
     (defun set-exec-var-from-shell (var)
       "Sets the exec-path to the same value used by the user shell"
       (let ((path-from-shell
              (replace-regexp-in-string
               "[[:space:]\n]*$" ""
               (shell-command-to-string (format "$SHELL -l -c 'echo $%s'" var)))))
         (setenv var
                 path-from-shell)
         (setq exec-path (split-string path-from-shell path-separator))))
     
     (set-exec-var-from-shell "PATH")
   #+end_src
